@@ -0,0 +1,266 @@
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sxm180018;

/**
 *
 * @author Shivani
 */
/* Starter code for LP2 */

// Change this to netid of any member of team
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Objects;
import java.util.Random;
import java.util.function.Consumer;


// Skeleton for skip list implementation.

public class SkipList<T extends Comparable<? super T>> {
    static final int PossibleLevels = 33; //CHANGE the name 

    static class Entry<E> {
	E element;
	Entry[] next;
	Entry prev;
        int[] span;
        int level;

	public Entry(E x, int lev) {
	    element = x;
	    next = new Entry[lev];
            span = new int[lev];
            span[0] = 1;  // for the bottom level span will always be 1
            level = lev;
            // add more code if needed
	}

	public E getElement() {
	    return element;
	}
        
    }
    private Entry head, tail; // dummy nodes
    private int size, maxLevel;
    private Entry[ ] last; // used by find()
    private Random random;
    
// Constructor
    public SkipList() {
        head = new Entry<>(null,PossibleLevels);
        tail = new Entry<>(null,PossibleLevels);
        size = 0;
        maxLevel = 1;
        last = new Entry[PossibleLevels];
        random = new Random();
        System.out.println("skip list constructor");
    }
    
    public void find(T x){
        Entry p = head;
        for(int i=maxLevel-1;i>=0;i--){
            while ( p.next[i] != null && x.compareTo( (T) p.next[i].element ) > 0) {
                p = p.next[i];
            }
            last[i] = p;
        }
    }
    
    public boolean contains(T x) {
        find(x);
        return last[0].next[0] != null && (x.compareTo((T) last[0].next[0].element) == 0); //change 
    }
    
     // Add x to list. If x already exists, reject it. Returns true if new node is added to list
    public boolean add(T x) {
	if(contains(x))
            return false;
        int lev = chooseLevel();
        Entry<T> ent = new Entry<>(x, lev);
        
        if(lev > maxLevel) {
            for (int i = maxLevel; i < lev; i++) {
                last[i] = head;
                //last[i].span[i] = 1;
            }
            maxLevel = lev;
        }
        
        for(int i=0 ; i< lev ; i++){
            ent.next[i] = last[i].next[i];
            last[i].next[i] = ent;
        }
        
        if(ent.next[0] != null) {
            ent.next[0].prev = ent;
        }
        if(last[0].element != null)
            ent.prev = last[0];
        
        //ent.next[0].prev = ent;
        //ent.prev = last[0];
        size++;
        return true;
    }
    
    public int chooseLevel(){
        int lev = 1 + Integer.numberOfTrailingZeros(random.nextInt());
        lev = Math.min(lev, maxLevel+1);
        return lev;
    }

    // Find smallest element that is greater or equal to x
    public T ceiling(T x) {
	if(contains(x))
            return x;
        Entry next_greatest = last[0];
        if(next_greatest == null || next_greatest.next[0] == null)
            return null;
        return (T) next_greatest.next[0].element;
    }

    // Does list contain x?

    // Return first element of list
    public T first() {
    SkipListIterator<T> skipListIterator = new SkipListIterator<>();
    
    if (skipListIterator.hasNext())
        return skipListIterator.next(); 
    else 
        return null; 
    }

    // Find largest element that is less than or equal to x
    public T floor(T x) {
	if(contains(x))
            return x;
        return (T) last[0].element;
    }

    // Return element at index n of list.  First element is at index 0.
    public T get(int n) {
        if (n < 0 || n > size - 1)
            return null;
        return getLinear(n);
    }

    // O(n) algorithm for get(n)
    public T getLinear(int n) {
	
        SkipListIterator<T> iterator = new SkipListIterator<>();
        //int counter = -1;
        T element= null;
        while (iterator.hasNext()) {
            element = iterator.next();
        }
        return element;

        
    }

    // Optional operation: Eligible for EC.
    // O(log n) expected time for get(n). Requires maintenance of spans, as discussed in class.
    public T getLog(int n) {
        return null;
    }

    // Is the list empty?
    public boolean isEmpty() {
	return size == 0;
    }

    // Iterate through the elements of list in sorted order
    public Iterator<T> iterator() {
	return new SkipListIterator<>();
    }

    // Return last element of list
    public T last() {
	SkipListIterator<T> skipListIterator = new SkipListIterator<>();
        T element = null; 
        while(skipListIterator.hasNext()){
        element = skipListIterator.next();
        }
        return element; 
    }

    // Optional operation: Reorganize the elements of the list into a perfect skip list
    // Not a standard operation in skip lists. Eligible for EC.
    public void rebuild() {
	
    }

    // Remove x from list.  Removed element is returned. Return null if x not in list
    public T remove(T x) {
	if (!contains(x))
            return null;
        
        Entry ent = last[0].next[0];
        for(int i= 0; i < ent.next.length; i++){
            last[i].next[i] = ent.next[i];
            //last[i].span[i] = last[i].span[i] + ent.span[i] - 1;
        }
        while(maxLevel > 0 && head.next[maxLevel] == null) {
            maxLevel--;
        }
        
        size--;
        
        return (T) ent.element;
    }

    // Return the number of elements in the list
    public int size() {
	return size;
    }
    
    public void printList() {
        Entry node = head.next[0];
        System.out.println("----------START----------");
        while (node != null && node.element != null) {
            for (int i = 0; i < node.level; i++) {
                System.out.print(node.element + "\t");
            }
            for (int j = node.level; j < maxLevel; j++) {
                System.out.print("|\t");
            }
            System.out.println();
            node = node.next[0];
        }
        System.out.println("----------END----------");
    }
    
    
    private class SkipListIterator<T> implements Iterator<T>
    {
        Entry cursor;
	Entry[] next;
	
        SkipListIterator(){
            cursor = head;
        }

        @Override
        public boolean hasNext() {
          return cursor.next[0] != null;   
            
        }
 
        @Override
        public T next() {
            if (hasNext()){
                cursor = cursor.next[0]; 
            }
            return (T) cursor.element;               
        }
        public void remove() {
            throw new NoSuchElementException();
        }
}
}
